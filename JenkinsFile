def return1() {
            openshift.withCluster() {
            openshift.withProject('coolstore-dev-lohit') {
	    
            return openshift.selector('bc', 'web-ui').exists()
            }

}
}
def checout(){
      checkout([$class: 'GitSCM', branches: [[name: '*/stable-ocp-3.10']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '', url: "${GIT_URL}"]]])
}

def BuildDecide(update){
    if(!update) {
        openshift.withCluster() {
		    openshift.verbose()
                openshift.withProject('coolstore-dev-lohit') {
                  openshift.newApp("${templatePath}") 
                }
            }
    }
    else  {
		openshift.withCluster() {
		openshift.withProject('coolstore-dev-lohit') {
                  openshift.startBuild("web-ui")
                   			}           	  
				
    }
}
}


pipeline {
  agent any
    environment {
        GIT_URL='https://github.com/lohitj/coolstore-microservice.git'
	    templatePath = 'https://raw.githubusercontent.com/lohitj/coolstore-microservice/stable-ocp-3.9/openshift/coolstore-template.yaml'
        sonarQube = 'https://raw.githubusercontent.com/lohitj/coolstore-microservice/stable-ocp-3.10/sonarqube-ephemeral-template.yaml'
    }
    tools{
        maven 'MAVEN_HOME'
        jdk   'JAVA_HOME'
    }

  stages {
  stage ('check') {
	    steps{
        BuildDecide(return1())
	    }
    }
    stage ('Build') {
    steps{
        checout()
        //sh 'mvn -f cart-service/pom.xml clean install'
        }
    }
    stage ('Sonar'){
        steps{
             openshift.withCluster() {
		    openshift.verbose()
                openshift.withProject('coolstore-dev-lohit') {
                  openshift.newApp("${sonarQube}") 
                }
            sh'mvn sonar:sonar'
            }
        }
    }
	  
   
    }
    
  }
